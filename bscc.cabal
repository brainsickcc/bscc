-- -*- indent-tabs-mode: nil; -*-

-- This file defines the Cabal package for bscc
-- Copyright © 2012 Iain Nicol

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

name:               bscc
synopsis:           The Brainsick code compiler
description:
  The Brainsick code compiler (bscc) is a compiler for a dialect of the
  BASIC language.  In particular, bscc aims to be compatible with the
  Visual Basic for Applications (VBA) language dialect.
-- When increasing the version number, also update:
--   * the `bscc-setuphs' dependencies in this file.
--   * `version' in bscc-setuphs.cabal
--   * `version' in Bscc.ThisPackage.Info
version:            0.2.0
cabal-version:      >=1.20
license:            AGPL-3
license-file:       COPYING
copyright:          © 2012, 2013 Iain Nicol
author:             Iain Nicol
maintainer:         https://www.brainsick.cc/
category:           Languages
homepage:           https://www.brainsick.cc/
bug-reports:        https://www.brainsick.cc/bugs/
-- A non-trivial Setup.hs file requires the Custom build type, to force
-- the cabal-install program to use said file.
build-type:         Custom
extra-source-files:
  -- The .ag files additionally need to be added to the "other-modules".
  Bscc/Ast/Plain.ag  Bscc/Ast/WithSem.ag  Bscc/Codegen/Ir.ag
  Bscc/Sem.ag  Bscc/Sem/Internal/Types.ag  Bscc/Symbol/Table.ag
  doc/example/README
  doc/example/hello/hello.bas
  doc/example/hello-awkward/main.bas
  doc/example/hello-awkward/showmsgbox.bas
  libbsccts/README
  .gitignore AUTHORS bscc-help2man-shim.hs ChangeLog INSTALL NEWS README
  uuagc_options
data-dir: .
data-files:
  libbsccts/startup.ll

source-repository head
  type: git
  location: https://gitlab.com/brainsick/bscc

executable bscc
  main-is: Main.hs
  -- Set the source directory to the root package directory, as opposed
  -- to say a ``src'' subdirectory.  The advantage of this is that GHCI
  -- running under Emacs, for example, can actually resolve
  -- package-local imports.  Thanks to namespacing (Bscc.Foo ->
  -- Bscc/Foo.hs), the source files thankfully are not intermingled with
  -- the build system files in the package root.
  hs-source-dirs: .
  -- Just like for .hs files, the .ag modules must be added here.
  -- Additionally, the .ag files must be added to "extra-source-files",
  -- as well as to the uuagc_options file.  Ref:
  -- <http://lists.science.uu.nl/pipermail/hut-developers/2011-February/
  -- 000248.html>.
  other-modules:
    Bscc.Ast.Plain Bscc.Ast.WithSem
    Bscc.Codegen.Ir Bscc.Codegen.Machine
    Bscc.GccArgParse
    Bscc.HelpAndVersion
    Bscc.Lex
    Bscc.Link
    Bscc.Main
    Bscc.Parse
    Bscc.Sem
    Bscc.Sem.Internal.Types
    Bscc.Symbol.Name
    Bscc.Symbol.Table
    Bscc.ThisPackage.Dir
    Bscc.ThisPackage.Info
    Bscc.Token
    Bscc.Triplet
    -- Cabal User Guide makes explicit that Paths_foo module should be
    -- included here.
    Paths_bscc
  default-language: Haskell2010
  -- Every {-# LANGUAGE extension #-} which has its use declared in any
  -- source file has to be additionally listed here.  Not doing this can
  -- cause build errors, at least with TemplateHaskell when profiling is
  -- enabled.
  --
  -- Keep this in sync with the test-suite.
  other-extensions:
    CPP,
    GADTs,
    NoMonomorphismRestriction,
    TemplateHaskell
  -- The dependency version requirements are likely stricter than
  -- necessary, to avoid the need to test we can be built against
  -- previous APIs.
  build-depends:
    -- I would have liked to write code against the Haskell standard
    -- library (plus other imports), by for example writing
    --   haskell2010 == 1.1.*
    -- However, as soon as you depend upon one import which is part of
    -- the base package and only the base package, it is game over and
    -- you must instead use base and not haskell2010.  For example, the
    -- Cabal-generated Paths_bscc module imports Data.Version from base.

    -- Keep dependencies in sync with the test-suite.
    base >= 4.7 && < 5,
    bscc-setuphs == 0.2.0,
    bytestring == 0.10.*,
    containers == 0.5.*,
    errors == 1.4.* && >= 1.4.2,
    groom == 0.1.* && >= 0.1.1,
    lens >= 4.1 && < 4.2,
    -- llvm-general version x.y.z.a requires LLVM version x.y.
    llvm-general == 3.4.2.* && >= 3.4.2.2,
    llvm-general-pure == 3.4.2.* && >= 3.4.2.2,
    -- Parsec 3.1.2 changed the behaviour of `lookAhead', so only
    -- downgrade with caution.
    parsec == 3.1.* && >= 3.1.3,
    pathtype == 0.5.* && >= 0.5.3,
    process == 1.2.*,
    safe == 0.3.* && >= 0.3.3,
    temporary == 1.2.*,
    transformers == 0.3.*,
    text == 1.1.*,
    uuagc == 0.9.* && >= 0.9.40.3
  build-tools:
    -- Dependencies listed here---at least the ones Cabal doesn't
    -- naturally understand---should also be added to hookedPrograms in
    -- Setup.hs.  See that file's `appendHookedPrograms' function.
    git,
    help2man,
    runhaskell
  cpp-options: -DBUILD
  ghc-options: -Wall -fwarn-tabs -fwarn-incomplete-uni-patterns


test-suite tests
  type: exitcode-stdio-1.0
  main-is: run-tests.hs
  hs-source-dirs: test .
  other-modules:
    Bscc.Ast.Plain Bscc.Ast.WithSem
    Bscc.Codegen.Ir Bscc.Codegen.Machine
    Bscc.HelpAndVersion
    Bscc.Main
    Bscc.Sem
    Bscc.Sem.Internal.Types
    Bscc.Symbol.Table
    Test.Bscc.Codegen.Machine
    Test.Bscc.Codegen.Ir
    Test.Bscc.GccArgParse
    Test.Bscc.HelpAndVersion
    Test.Bscc.Lex
    Test.Bscc.Main
    Test.Bscc.Parse
    Test.Bscc.Sem
    Test.Bscc.Symbol.Name
    Test.Bscc.Symbol.Table
  default-language: Haskell2010
  other-extensions:
    -- Same as for bscc.
    CPP,
    GADTs
  build-depends:
    -- Unique to the test suite.
    tasty == 0.8.*,
    tasty-hunit == 0.8.*,
    tasty-quickcheck == 0.8.*,
    -- Same as for bscc.
    base >= 4.7 && < 5,
    bscc-setuphs == 0.2.0,
    bytestring == 0.10.*,
    containers == 0.5.*,
    errors == 1.4.* && >= 1.4.2,
    groom == 0.1.* && >= 0.1.1,
    lens >= 4.1 && < 4.2,
    llvm-general == 3.4.2.* && >= 3.4.2.2,
    llvm-general-pure == 3.4.2.* && >= 3.4.2.2,
    parsec == 3.1.* && >= 3.1.3,
    pathtype == 0.5.* && >= 0.5.3,
    process == 1.2.*,
    safe == 0.3.* && >= 0.3.3,
    temporary == 1.2.*,
    transformers == 0.3.*,
    text == 1.1.*,
    uuagc == 0.9.* && >= 0.9.40.3
  -- Disable optimization.  According to the FAQ of test-framework
  -- (http://batterseapower.github.com/test-framework/), GHC can
  -- optimize away calls to `error', causing tests to misbehave.
  ghc-options: -O0
               -Wall -fwarn-tabs -fwarn-incomplete-uni-patterns
               -fno-warn-missing-signatures

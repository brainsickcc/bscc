-- -*- auto-fill-mode: nil; indent-tabs-mode: nil; -*-

PRAGMA genlinepragmas

optpragmas
{
-- Copyright Â© 2012 Iain Nicol

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generation of the Intermediate Representation (IR).

-- This comment separates above doc comment and UUAGC-inserted comment
}

MODULE {Bscc.Codegen.Ir}
-- Exports
{
codegen
}
-- Imports
{
import Bscc.Ast.WithSem
import Bscc.Symbol.Name

import Control.Exception (throwIO)
import Control.Lens.Operators ((&), (<&>))
import Control.Monad ((>=>))
import Control.Monad.Trans.Error (ErrorT, runErrorT)
import qualified Data.ByteString as B
import Data.Foldable (toList)
import Data.Monoid ((<>))
import Data.Sequence ((<|))
import qualified Data.Sequence as Seq
import qualified Data.Set as Set
import qualified Data.Text as T
import Data.Text.Encoding (encodeUtf16BE)
import Data.Word (Word8, Word16)
import qualified LLVM.General.AST as A
import LLVM.General.AST.Attribute (ParameterAttribute)
import LLVM.General.AST.AddrSpace (AddrSpace (AddrSpace))
import qualified LLVM.General.AST.CallingConvention as CC
import qualified LLVM.General.AST.Constant as C
import qualified LLVM.General.AST.Global as G
import qualified LLVM.General.AST.Instruction as I
import qualified LLVM.General.AST.Linkage as L
import qualified LLVM.General.AST.Name as N
import qualified LLVM.General.AST.Operand as O
import qualified LLVM.General.AST.Type as T
import qualified LLVM.General.AST.Visibility as V
import Prelude hiding (FilePath)
import System.Path (RelFile, takeBaseName, (<.>))
}

INCLUDE "../Ast/WithSem.ag"


{
-- | IR code generation.
codegen :: SProject               -- ^ AST with type information.
        -> [(A.Module, RelFile)]  -- ^ The `fst' of each list element is
                                  -- IR.  The `snd' is a (recommended)
                                  -- relative path to save it to, if you
                                  -- were to convert it to textual LLVM
                                  -- assembly.
codegen = toList .
          ir_Syn_SProject . (`wrap_SProject` Inh_SProject) . sem_SProject

fromRightErrorTIo :: Show a => ErrorT a IO b -> IO b
fromRightErrorTIo = runErrorT >=> either (throwIO . userError . show) return

x86_stdcallcc :: CC.CallingConvention
x86_stdcallcc = CC.Numbered 64
}

-- Support for UNIQUEREF (generating unique numbers, for labels, etc.).
ATTR SModule SProcs SProc SInProcStmts SInProcStmt SExprs SExpr
     [ | counter: Int | ]
SEM SModules
  | Cons  hd.counter = 1
{
-- | Function with required named and behaviour, per the UUAGC manual,
-- for UNIQUEREF support.
nextUnique :: Int -> (Int, Int)
nextUnique n = (n + 1, n)
}


-- * Here we have the main, reasonably straightforward (famous last
-- words), section of code for IR generation

ATTR SProject     [ | | ir: {Seq.Seq (A.Module, RelFile)} ]
SEM SProject
  | SProject  lhs.ir = @modules.ir

ATTR SModules     [ | | ir USE {<|} {Seq.empty}:
                          {Seq.Seq (A.Module, RelFile)} ]

ATTR SModule      [ | | ir: {(A.Module, RelFile)} ]
SEM SModule
  | SBasModule  lhs.ir = (A.defaultModule
                          {
                            A.moduleDefinitions =
                              @loc.fileLevelDecls <> @procs.definition
                              <&> A.GlobalDefinition
                              & toList
                          },
                          takeBaseName @path <.> "ll")
                loc.fileLevelDecls = @procs.fileLevelDecls <>
                                     @loc.declsUsedNonLocalProcs
                loc.declsUsedNonLocalProcs =
                {
                  @procs.usedNonLocalProcs
                  & Set.elems
                  & Seq.fromList
                  <&> procProtoGetDeclIr @lhs.inProject @name
                }
{
-- | Calling a procedure defined in another file requires a declaration
-- in the file you are generating code for.  This function takes the
-- name of the Project and then the Module containing the call,
-- and additionally the prototype of the called procedure.  Returns the
-- required declaration.
procProtoGetDeclIr :: SymbolName -> SymbolName -> SProcPrototype -> G.Global
procProtoGetDeclIr inProject inModule =  importDeclaration_Syn_SProcPrototype .
                                         (`wrap_SProcPrototype` inh) .
                                         sem_SProcPrototype
  where inh = Inh_SProcPrototype { inProject_Inh_SProcPrototype = inProject,
                                   inModule_Inh_SProcPrototype = inModule }
}

ATTR SProcs SProc SInProcStmts
     SInProcStmt SExprs [ | | fileLevelDecls USE {<>} {Seq.empty}:
                                {Seq.Seq G.Global} ]

ATTR SProcs       [ | | definition USE {<|} {Seq.empty}: {Seq.Seq G.Global} ]

ATTR SProc        [ | | definition: {G.Global} ]
SEM SProc
  | SProc  lhs.definition =
    {
      @proto.definitionDeclaration
      {
        G.basicBlocks =
        [
          G.BasicBlock (N.UnName 0)
                       (toList @body.instr)
                       (I.Do $ I.Ret (@loc.retTypeGetDefaultVal @proto.retType)
                                     [])
        ]
      }
    }
           loc.retTypeGetDefaultVal = defaultVal_Syn_SProcRetType .
                                      (`wrap_SProcRetType` Inh_SProcRetType) .
                                      sem_SProcRetType

ATTR SProcPrototype SArgDefs SArgDef SType SExpr SProcRetType
     [ | | self: SELF ]

ATTR SProcPrototype [ | | importDeclaration: {G.Global}
                          definitionDeclaration: {G.Global}
                          asCallable: {O.CallableOperand}
                          retType: SProcRetType ]
SEM SProcPrototype
  | SProcPrototype
      -- The declaration is necessary in a file calling this procedure,
      -- if the file calling this function is different from the one
      -- containing its implementation.
      lhs.importDeclaration = @loc.proto
      -- Used when the implementation of our procedure is defined.
      lhs.definitionDeclaration = @loc.proto
      lhs.asCallable = Right . O.ConstantOperand . C.GlobalReference $
                         procName @self
      loc.retType = @retType.self
      -- Standard library is compiled to a .dll.
      loc.linkage = if @implProject == vbaProjectName then L.DLLImport
                                                      else L.External
      loc.proto = G.Function @loc.linkage V.Default x86_stdcallcc []
                    @retType.ty (procName @self)
                    (toList @argDefs.defn, False) [] Nothing 0 Nothing []

{
procName :: SProcPrototype -> N.Name
procName SProcPrototype {implProject_SProcPrototype_SProcPrototype =
                           implProject,
                         name_SProcPrototype_SProcPrototype = name}
         | implProject == vbaProjectName = N.Name (raw name)
         | otherwise = N.Name ("proc_" ++ normalized name)

-- | The name of the standard library Project (\"VBA\") as a `SymbolName'.
vbaProjectName :: SymbolName
vbaProjectName = mkSymbolName "VBA"
}

ATTR SArgDefs [ | | defn USE {<|} {Seq.empty}: {Seq.Seq G.Parameter} ]

ATTR SArgDef  [ | | defn: {G.Parameter} ]
SEM SArgDef
  | SArgDef  lhs.defn = G.Parameter @ty.ty (N.UnName 0) []

ATTR SType [ | | defaultVal: {O.Operand}
                 ty: {T.Type} ]

SEM SType
  | SString  loc.ty = (T.PointerType (T.IntegerType 16) (AddrSpace 0))
             lhs.defaultVal = O.ConstantOperand $ C.Null @loc.ty

ATTR SProcRetType [ | | defaultVal: {Maybe O.Operand}
                        ty: {T.Type} ]
SEM SProcRetType
  | Just     lhs.ty = @just.ty
             lhs.defaultVal = Just @just.defaultVal
  | Nothing  lhs.ty = T.VoidType
             lhs.defaultVal = Nothing

ATTR SInProcStmts [ | | instr USE {<|} {Seq.empty}:
                          {Seq.Seq (I.Named I.Instruction)} ]

ATTR SInProcStmt  [ | | instr: {I.Named I.Instruction} ]
SEM SInProcStmt
  | SCall  lhs.instr = I.Do $ I.Call False x86_stdcallcc [] @proc.asCallable
                                     (toList @args.operandEtc) [] []

ATTR SExprs [ | | operandEtc USE {<|} {Seq.empty}:
                    {Seq.Seq (O.Operand, [ParameterAttribute])} ]

ATTR SExpr [ | | fileLevelDecls: {Seq.Seq G.Global}
                 operandEtc: {(O.Operand, [ParameterAttribute])} ]
SEM SExpr
  | SStringLit  -- Determine a unique register to store the string
                -- contents into.
                loc.uniqueN : UNIQUEREF counter
                loc.register = N.Name $ "s" ++ show @loc.uniqueN
                -- Store the string contents (outwith the procedure).
                -- Requires determining the type.  We null terminate the
                -- string.
                loc.fileLevelDecls =
    {
      Seq.singleton $
      G.GlobalVariable @loc.register L.Private V.Default False (AddrSpace 0)
                       False True @loc.contentsType
                       (Just $ word16sToIr @loc.word16s)
                       Nothing 0
    }
                loc.word16s = hsStringToWord16s @val
                loc.contentsType =
                     T.ArrayType (fromIntegral $ length @loc.word16s)
                                 (T.IntegerType 16)
                -- Whenever any generated code needs the string, we
                -- refer to it via a (typed) pointer.
                lhs.operandEtc =
    {
      (O.ConstantOperand $ C.GetElementPtr True (C.GlobalReference @register)
                                           [C.Int 64 0, C.Int 64 0],
       [])
    }

-- Support functions for translating string literals
{
-- | Translate a list of UTF-16 codepoints (with host endianness)
-- representing the body of a string literal, to the `Ir' form of the
-- list (which is endian neutral).  Does not add a trailing NUL.
word16sToIr :: [Word16] -> C.Constant
word16sToIr xs = C.Array (T.IntegerType 16)
                         (map (\x -> C.Int 16 (fromIntegral x)) xs)

-- | Convert a standard Haskell string to a list of UTF-16 codepoints
-- (with host endianness).  Adds a trailing NUL.
hsStringToWord16s :: String -> [Word16]
hsStringToWord16s xs = xs
                       & T.pack & encodeUtf16BE & B.unpack & takePairs
                       <&> uncurry word8sToWord16
                       & (++ [0])

-- | Convert a list into a list of pairs, by taking two consecutive
-- elements at a time.
takePairs :: [a] -> [(a, a)]
takePairs [] = []
takePairs [_] = []
takePairs (x:y:z) = [(x, y)] ++ takePairs z

-- | Return a 16-bit unsigned number, which was inputted as two octects
-- in big endian order.
word8sToWord16 :: Word8 -> Word8 -> Word16
word8sToWord16 a b = a' * 256 + b'
    where a' = fromIntegral a :: Word16
          b' = fromIntegral b :: Word16
}


-- * Here we have to keep track of symbols, for use in the main IR
-- generation code.

-- Keep track of the Project and the Module we are generating code for.
-- users.  Note that for symbols such as procedures there is a
-- distinction between the module (or project) we are generating code
-- for, and the module (or project) containing the implementation;
-- cf. the `isModuleLocal' attribute.
ATTR SModules SModule [ inProject: SymbolName | | ]
ATTR SProcs SProc SProcPrototype SInProcStmts SInProcStmt
                      [ inProject: SymbolName
                        inModule: SymbolName  | | ]
SEM SProject
  | SProject  modules.inProject = @name

SEM SModule
  | SBasModule  procs.inModule = @name

-- Keep track of calls to procedures implemented in files other than the
-- file containing the call; the prototypes of these functions need
-- declared in the files calling them.
ATTR SProcs SProc SInProcStmts [ | | usedNonLocalProcs:
                                       {Set.Set SProcPrototype} ]
ATTR SInProcStmt [ | | usedNonLocalProc: {Maybe SProcPrototype} ]

SEM SProcs
  | Cons  lhs.usedNonLocalProcs = @tl.usedNonLocalProcs `Set.union`
                                  @hd.usedNonLocalProcs
  | Nil   lhs.usedNonLocalProcs = Set.empty

SEM SInProcStmts
  | Cons  lhs.usedNonLocalProcs = case @hd.usedNonLocalProc of
                                    Just p -> Set.insert p
                                                         @tl.usedNonLocalProcs
                                    Nothing -> @tl.usedNonLocalProcs
  | Nil   lhs.usedNonLocalProcs = Set.empty

SEM SInProcStmt
  | SCall  lhs.usedNonLocalProc = if @proc.isModuleLocal
                                  then Nothing
                                  else Just @proc.self

-- This answers this question: Is the procedure which is being used
-- (that is, being called) being used in the module (and project)
-- containing the procedure's implementation?
ATTR SProcPrototype [ | | isModuleLocal: Bool ]
SEM SProcPrototype
  | SProcPrototype  lhs.isModuleLocal = @lhs.inProject == @implProject &&
                                        @lhs.inModule == @implModule
